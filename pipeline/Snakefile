# Snakemake pipeline for running mrScan package
#
#
# LICENSE: CC0. Do what you want with the code, but it has no guarantees.
#          https://creativecommons.org/share-your-work/public-domain/cc0/
#
#
#
# ./run_snakemake.sh
#
# don't forget to update cluster.yaml


import pandas as pd
import random
import string
import os.path
from snakemake.utils import validate

###### Load configuration file
configfile: "config.yaml"

#ss = pd.read_csv(config["input"]["sum_stats"], na_filter=False)

# output options
data_dir = config["out"]["data_dir"] #where the data is
out_dir = config["out"]["output_dir"] #where results will go
original_gwas_dir = config["out"]["gwas_dir"] # where originally download gwas data lives
formatted_gwas_dir = config["out"]["formatted_gwas_dir"] # where formatted gwas data lives

prefix = config["input"]["label"] + "_"
id_exposure = config["input"]["id_exposure"]
id_outcome = config["input"]["id_outcome"]
l2_dir = config["analysis"]["R"]["l2_dir"] # where LD score reference data lives

if os.path.exists(data_dir + prefix + "qc_id_list.csv"):
    trait_id = pd.read_csv(data_dir + prefix + "qc_id_list.csv")['id'].tolist()

rule all:
    input:
        #data_dir + prefix + "qc_id_list.csv",
        #data_dir + prefix + "qc_trait_info.csv",
        #data_dir + prefix + "downstream_filter.RDS"
        #data_dir + prefix + "download.sh",
        #data_dir + prefix + "pairwise_cor.RDS",
        data_dir + prefix + "unique_traits.RDS"

rule extract_traits:
    params: id_exposure = id_exposure,
            id_outcome = id_outcome,
            batch = config["analysis"]["extract_traits"]["batch"],
            population = config["analysis"]["pop"],
            pval_instruments = config["analysis"]["pval_instruments"],
            pval_traits = config["analysis"]["extract_traits"]["pval_traits"],
            r2_thresh = config["analysis"]["ldprune"]["r2_thresh"],
            clump_kb = config["analysis"]["ldprune"]["clump_kb"],
            min_snps = config["analysis"]["extract_traits"]["min_snps"]
    output: out = data_dir + prefix + "extract_traits.RDS"
    script: 'R/1_extract_traits.R'

rule quality_control:
    input: file = data_dir + prefix + "extract_traits.RDS"
    params: id_exposure = id_exposure,
            nsnp_cutoff = config["analysis"]["quality_control"]["nsnp_cutoff"],
            population = config["analysis"]["quality_control"]["pop"],
            sex = config["analysis"]["quality_control"]["sex"]
    output: id_list = data_dir + prefix + "qc_id_list.csv",
            trait_info = data_dir + prefix + "qc_trait_info.csv",
    script: 'R/2_quality_control.R'
    
# trait_id = pd.read_csv(data_dir + prefix + "qc_id_list.csv")['id'].tolist()
        
def input_downstream(wcs):
    if os.path.exists(data_dir + prefix + "qc_id_list.csv"):
        trait_id = pd.read_csv(data_dir + prefix + "qc_id_list.csv")['id'].tolist()
        return expand(data_dir + prefix + "bidirection_{ID1}_{ID2}.RDS", ID1 = [id_exposure,id_outcome], ID2 = trait_id)
    else:
        return data_dir + prefix + "qc_id_list.csv" # need to ask here. Now it only run first two and downstream_filter step
        
rule extract_inst:
    params: pval_instruments = config["analysis"]["pval_instruments"],
            trait = "{ID}"
    output: out = data_dir + prefix + "inst_{ID}.RDS"
    script: "R/3_extract_inst.R"

rule bidirection_mr:
    input: file1 = data_dir + prefix + "inst_{ID1}.RDS",
           file2 = data_dir + prefix + "inst_{ID2}.RDS",
    params: method = config["analysis"]["bidirection_mr"]["method"],
            over_dispersion = config["analysis"]["bidirection_mr"]["over_dispersion"],
            loss_function = config["analysis"]["bidirection_mr"]["loss_function"]
    output: out = data_dir + prefix + "bidirection_{ID1}_{ID2}.RDS"
    script: "R/3_bidirection_mr.R"

rule downstream_filter:
    input: id_list = data_dir + prefix + "qc_id_list.csv", 
           mr_files = input_downstream,
           trait_info = data_dir + prefix + "qc_trait_info.csv"
    params: id_exposure = id_exposure,
            sig_level = config["analysis"]["downstream_filter"]["sig_level"],
            R2_cutoff = config["analysis"]["quality_control"]["R2_cutoff"]
    output: out = data_dir + prefix + "downstream_filter.RDS"
    script:"R/3_downstream_filter.R"

rule generate_download_file:
    input: file =  data_dir + prefix + "downstream_filter.RDS"
    params: path = original_gwas_dir
    output: out = data_dir + prefix + "download.sh"
    script:"R/4_download_data.R"

rule download_gwas:
    input: data_dir + prefix + "download.sh"
    output: "log/download.log" # Ask this, how to solve no output problem?
    shell: "bash {input} > {output}"

rule combine_gwas:
    input: file = data_dir + prefix + "downstream_filter.RDS"
    params: path = original_gwas_dir
    output: out = data_dir + prefix + "all_beta.{chrom}.RDS"
    wildcard_constraints: chrom = "\d+"
    script:"R/4_combine_gwas.R"

rule calculate_cor:
    input: beta = expand(data_dir + prefix + "all_beta.{chrom}.RDS", chrom = range(1, 23)),
           m = expand(l2_dir + "{chrom}.l2.M_5_50", chrom = range(1, 23)),
           l2 = expand(l2_dir + "{chrom}.l2.ldscore.gz", chrom = range(1, 23))
    output: out = data_dir + prefix + "pairwise_cor.RDS"
    wildcard_constraints: pt = "[\d.]+"
    script: "R/4_ldsc_full.R"

rule unique_traits:
    input: file = data_dir + prefix + "downstream_filter.RDS",
           pairwise_cor = data_dir + prefix + "pairwise_cor.RDS"
    params: R2_cutoff = config["analysis"]["unique_traits"]["R2_cutoff"],
            method = config["analysis"]["unique_traits"]["method"]
    output: out = data_dir + prefix + "unique_traits.RDS"
    script: "R/4_unique_traits.R"

#rule extract_associations:
#    input: inst_files = expand(data_dir + prefix + "inst.{ID}.RDS", ID = trait_id)
#     params: trait = {ID}
#    output: out = temp(data_dir + prefix + "associations.{ID}.RDS")
#    script: "R/3_extract_associations.R"

#rule calculate_pairwise_cor:
#    input: association_files = expand(data_dir + prefix + "associations.{ID}.RDS",ID = trait_id),
#           inst_files = expand(data_dir + prefix + "inst.{ID}.RDS", ID = trait_id),
#           id_list = data_dir + prefix + "qc_id_list.csv"
#    output: out = data_dir + prefix + "pairwise_cor.RDS"
#    script: "R/3_calculate_pairwise_cor.R"


