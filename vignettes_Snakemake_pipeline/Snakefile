# Snakemake pipeline for running mrScan package
#
#
# LICENSE: CC0. Do what you want with the code, but it has no guarantees.
#          https://creativecommons.org/share-your-work/public-domain/cc0/
#
#
#
# ./run_snakemake.sh
#
# don't forget to update cluster.yaml


import pandas as pd
import random
import string
import os.path
from snakemake.utils import validate

###### Load configuration file
configfile: "config.yaml"


# output options
data_dir = config["out"]["data_dir"] #where the data is
out_dir = config["out"]["output_dir"] #where results will go
original_gwas_dir = config["out"]["gwas_dir"] # where originally download gwas data lives

prefix = config["input"]["label"] + "_"
exposure_prefix = config["input"]["exposure_label"] + "_"
id_exposure = config["input"]["id_exposure"]
id_outcome = config["input"]["id_outcome"]
type_outcome = config["input"]["type_outcome"]
prevalence_outcome = config["input"]["prevalence_outcome"]
l2_dir = config["analysis"]["estimate_R"]["l2_dir"] # where LD score reference data lives

df_info_exposure_outcome = config["input"]["info_exposure_outcome"]
if df_info_exposure_outcome == "NA":
    df_info_exposure_outcome = out_dir + "df_info_exposure_outcome.csv"
    
selection_type = []
if "classic_Lasso" in config["analysis"]["confounder_selection"]["method"]:
    classic_Lasso_string = expand("classic_Lasso_{lambda_type}_seed{seed}",
                              lambda_type = config["analysis"]["confounder_selection"]["lambda_type"],
                              seed = config["analysis"]["confounder_selection"]["seed"])
    selection_type.extend(classic_Lasso_string)

if "stepwise" in config["analysis"]["confounder_selection"]["method"]:
    stepwise_string =  expand("stepwise_{stepwise_method}",
                              stepwise_method = config["analysis"]["confounder_selection"]["stepwise_method"])
    selection_type.extend(stepwise_string)

if "marginal" in config["analysis"]["confounder_selection"]["method"]:
    marginal_string = expand("marginal_p_{marginal_p}",
                              marginal_p = config["analysis"]["confounder_selection"]["marginal_p"])
    selection_type.extend(marginal_string)

if "literature" in config["analysis"]["confounder_selection"]["method"]:
    selection_type.append("literature")

if "corrected_Lasso" in config["analysis"]["confounder_selection"]["method"]:
    corrected_Lasso_string = expand("corrected_Lasso_{radius_type}_seed{seed}",
                                    radius_type = config["analysis"]["confounder_selection"]["radius_type"],
                                    seed = config["analysis"]["confounder_selection"]["seed"])
    selection_type.extend(corrected_Lasso_string)
    
if "UVMR" in config["analysis"]["confounder_selection"]["method"]:
    selection_type.append("UVMR")

MVMR_list = expand("selection_{type}",type = selection_type)
MVMR_strength_list = [x for x in MVMR_list if x != 'selection_UVMR']
MVMR_list.append("unique_traits_filter")
R_type = []
if "pval" in config["analysis"]["estimate_R"]["type"]:
    R_type.append("pval")
if "ldsc" in config["analysis"]["estimate_R"]["type"]:
    R_type.append("ldsc")

MVMR_method = []
if "IVW" in config["analysis"]["MVMR_analysis"]["method"]:
    IVW_string = expand("IVW_{IVW_pt}",IVW_pt = config["analysis"]["MVMR_analysis"]["p_thresh_IVW"])
    MVMR_method.extend(IVW_string)
if "GRAPPLE" in config["analysis"]["MVMR_analysis"]["method"]:
    GRAPPLE_string = expand("GRAPPLE_{GRAPPLE_pt}",GRAPPLE_pt = config["analysis"]["MVMR_analysis"]["p_thresh_GRAPPLE"])
    MVMR_method.extend(GRAPPLE_string)
if "MRBEE" in config["analysis"]["MVMR_analysis"]["method"]:
    MRBEE_string = expand("MRBEE_{MRBEE_pt}_pleio_{pleio_pt}",MRBEE_pt = config["analysis"]["MVMR_analysis"]["p_thresh_MRBEE"],
                           pleio_pt = config["analysis"]["MVMR_analysis"]["pleio_p_thresh"])
    MVMR_method.extend(MRBEE_string)
if "ESMR" in config["analysis"]["MVMR_analysis"]["method"]:
    ESMR_string = expand("ESMR_{ESMR_pt}",ESMR_pt = config["analysis"]["MVMR_analysis"]["p_thresh_ESMR"])
    MVMR_method.extend(ESMR_string)

MVMR_R_type = config["analysis"]["MVMR_analysis"]["R_type"]
cluster_selection_method = config["analysis"]["unique_traits"]["cluster_selection_method"]
downstream_filter_method = expand("{downstream_method}_FDR_p_{downstream_p}", downstream_method = config["analysis"]["downstream_filter"]["method"],
                                  downstream_p = config["analysis"]["downstream_filter"]["p"])
rule all:
    input:
        #data_dir + exposure_prefix + "extract_traits.RDS",
        #expand(out_dir + exposure_prefix + "qc_{suffix}.csv",suffix = ["id_list","trait_info"]),
        #expand(data_dir + "bidirection_{ID1}_{ID2}.RDS", ID1 = [id_exposure,id_outcome], ID2 = trait_id),
        #expand(data_dir + "bidirection_{ID1}_{ID3}_{ID2}.RDS",ID1 = [id_exposure,id_outcome], ID2 = trait_id, ID3 = ["ukb-b-19953"])
        #expand(out_dir + prefix + "downstream_filter_{suffix}_{method}.csv",suffix=["id_list", "trait_info", "df_bidirection"], method=downstream_filter_method)
        #expand(data_dir + prefix + "download_{method}.sh",method = downstream_filter_method),
        #expand(data_dir + prefix + "success_download_{method}.txt",method = downstream_filter_method),
        #expand(out_dir + prefix + "unique_traits_{method}_{cluster_selection_meth}_{suffix}.csv",cluster_selection_meth = cluster_selection_method,method=downstream_filter_method, suffix = ["id_list","trait_info"]),
        #expand(out_dir + prefix + "unique_traits_{suffix}.csv",suffix = ["filter_id_list","filter_trait_info","df_strength"]),
        expand(out_dir + prefix + "{MVMR_strength_id}_{method}_{cluster_selection_meth}_MVMR_strength.csv",MVMR_strength_id = MVMR_strength_list,method = downstream_filter_method,cluster_selection_meth = cluster_selection_method),
        expand(out_dir + prefix + "{method}_{cluster_selection_meth}_summary.{suffix}",method = downstream_filter_method, cluster_selection_meth = cluster_selection_method, suffix = ["csv","pdf"])

    
rule extract_traits:
    params: id_exposure = id_exposure,
            batch = config["analysis"]["extract_traits"]["batch"],
            population = config["analysis"]["pop"],
            pval_instruments = config["analysis"]["pval_instruments"],
            pval_traits = config["analysis"]["extract_traits"]["pval_traits"],
            r2_thresh = config["analysis"]["ldprune"]["r2_thresh"],
            clump_kb = config["analysis"]["ldprune"]["clump_kb"],
            min_snps = config["analysis"]["extract_traits"]["min_snps"],
            type_exposure = config["analysis"]["extract_traits"]["type_exposure"],
            type_candidate_traits = config["analysis"]["extract_traits"]["type_candidate_traits"],
            file_path = config["analysis"]["extract_traits"]["file_path"],
            ref_path = config["analysis"]["ldprune"]["ref_path"],
            df_candidate_traits = config["analysis"]["extract_traits"]["df_candidate_traits"]
    output: out = data_dir + exposure_prefix + "extract_traits.RDS"
    script: 'R/1_extract_traits.R'

checkpoint quality_control:
    input: file = data_dir + exposure_prefix + "extract_traits.RDS"
    params: nsnp_cutoff = config["analysis"]["quality_control"]["nsnp_cutoff"],
            population = config["analysis"]["quality_control"]["pop"],
            gender = config["analysis"]["quality_control"]["gender"]
    output: id_list = out_dir + exposure_prefix + "qc_id_list.csv",
            trait_info = out_dir + exposure_prefix + "qc_trait_info.csv"
    script: 'R/2_quality_control.R'

rule extract_inst:
    params: pval_instruments = config["analysis"]["pval_instruments"],
            trait = "{ID}"
    output: out = data_dir + "inst_{ID}.RDS"
    wildcard_constraints: ID = "[^_]+"
    script: "R/extract_inst.R"

rule extract_inst_mvmr:
    params: pval_instruments = config["analysis"]["pval_instruments"],
            trait1 = "{ID1}",
            trait2 = "{ID2}"
    output: out = data_dir + "inst_{ID1}_{ID2}.RDS"
    script: "R/extract_inst_mvmr.R"
    
def input_downstream(wcs):
    file = checkpoints.quality_control.get().output[0]
    trait_id = pd.read_csv(file)['id'].tolist()
    extra_traits =  config["analysis"]["bidirection_mr"]["extra_trait"]
    if extra_traits == "None":
        return expand(data_dir + "bidirection_{ID1}_{ID2}.RDS", ID1 = [id_exposure,id_outcome], ID2 = trait_id)
    else:
        if extra_traits in trait_id:
            trait_id.remove(extra_traits)
    return expand(data_dir + "bidirection_{ID1}_{ID3}_{ID2}.RDS",ID1 = [id_exposure,id_outcome], ID2 = trait_id, ID3 = extra_traits)

rule bidirection_mr:
    input: file1 = data_dir + "inst_{ID1}.RDS",
           file2 = data_dir + "inst_{ID2}.RDS"
    params: min_instruments = config["analysis"]["bidirection_mr"]["min_instruments"],
            effect_size_cutoff = config["analysis"]["bidirection_mr"]["effect_size_cutoff"],
            R2_cutoff = config["analysis"]["quality_control"]["R2_cutoff"],
            prevalence = prevalence_outcome,
            id_outcome = id_outcome,
            type_outcome = type_outcome
    output: out = data_dir + "bidirection_{ID1}_{ID2}.RDS"
    wildcard_constraints: ID1 = "[^_]+",
                          ID2 = "[^_]+"
    script: "R/3_bidirection_mr.R"

rule bidirection_mvmr:
    input: file1 = data_dir + "inst_{ID1}_{ID3}.RDS", # X/Y + M
           file2 = data_dir + "inst_{ID2}.RDS", # Z
           file3 = data_dir + "inst_{ID2}_{ID3}.RDS", # Z + M
           file4 = data_dir + "inst_{ID1}.RDS", # X/Y
           trait_info = out_dir + exposure_prefix + "qc_trait_info.csv"
    params: min_instruments = config["analysis"]["bidirection_mr"]["min_instruments"],
            effect_size_cutoff = config["analysis"]["bidirection_mr"]["effect_size_cutoff"],
            R2_cutoff = config["analysis"]["quality_control"]["R2_cutoff"],
            prevalence = prevalence_outcome,
            id_outcome = id_outcome,
            type_outcome = type_outcome
    output: out = data_dir + "bidirection_{ID1}_{ID3}_{ID2}.RDS"
    script: "R/3_bidirection_mvmr.R"

rule downstream_filter:
    input: id_list = out_dir + exposure_prefix + "qc_id_list.csv",
           trait_info = out_dir + exposure_prefix + "qc_trait_info.csv",
           mr_files = input_downstream
    params: id_exposure = id_exposure,
            p = lambda wc: wc.get("downstream_p"),
            extra_trait = config["analysis"]["bidirection_mr"]["extra_trait"],
            method = config["analysis"]["downstream_filter"]["method"]
    output: out_id_list = out_dir + prefix + "downstream_filter_id_list_{downstream_method}_FDR_p_{downstream_p}.csv",
            out_trait_info = out_dir + prefix + "downstream_filter_trait_info_{downstream_method}_FDR_p_{downstream_p}.csv",
            out_df_bidirection = out_dir + prefix + "downstream_filter_df_bidirection_{downstream_method}_FDR_p_{downstream_p}.csv"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+"
    script: "R/3_downstream_filter.R"

rule generate_download_file:
    input: file =  out_dir + prefix + "downstream_filter_id_list_{downstream_method}_FDR_p_{downstream_p}.csv",
           df_harmonise = "harmonised_list.txt" # change to your harmonised_list.txt file position
    params: path = original_gwas_dir,
            checkpoint = data_dir + prefix + "success_download_{downstream_method}_FDR_p_{downstream_p}.txt",
            id_exposure = id_exposure,
            id_outcome = id_outcome
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+"
    output: out = data_dir + prefix + "download_{downstream_method}_FDR_p_{downstream_p}.sh"
    script: "R/4_download_data.R"

checkpoint download_gwas:
    input: data_dir + prefix + "download_{downstream_method}_FDR_p_{downstream_p}.sh"
    output: data_dir + prefix + "success_download_{downstream_method}_FDR_p_{downstream_p}.txt"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+"
    shell: "bash {input}"

def input_combine_gwas(wcs):
    downstream_method = wcs.downstream_method
    downstream_p = wcs.downstream_p
    myfile = checkpoints.download_gwas.get(downstream_method=downstream_method,downstream_p=downstream_p).output[0]
    id_list_path = out_dir + prefix + "downstream_filter_id_list_{downstream_method}_FDR_p_{downstream_p}.csv"
    trait_info_path = out_dir + prefix + "downstream_filter_trait_info_{downstream_method}_FDR_p_{downstream_p}.csv"
    return id_list_path, trait_info_path
    
rule combine_gwas:
    input: id_list = lambda wcs: input_combine_gwas(wcs)[0],
           trait_info = lambda wcs: input_combine_gwas(wcs)[1],
           download = data_dir + prefix + "download_{downstream_method}_FDR_p_{downstream_p}.sh"
    params: path = original_gwas_dir
    output: out = data_dir + prefix + "all_beta.{chrom}_{downstream_method}_FDR_p_{downstream_p}.RDS"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          chrom = "\d+"
    script: "R/4_combine_gwas.R"

rule calculate_cor:
    input: beta = expand(data_dir + prefix + "all_beta.{chrom}_{{downstream_method}}_FDR_p_{{downstream_p}}.RDS", chrom = range(1, 23)),
           m = expand(l2_dir + "{chrom}.l2.M_5_50", chrom = range(1, 23)),
           l2 = expand(l2_dir + "{chrom}.l2.ldscore.gz", chrom = range(1, 23))
    output: out = out_dir + prefix + "pairwise_cor_{downstream_method}_FDR_p_{downstream_p}.RDS"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+"
    script: "R/4_ldsc_full.R"

def input_unique_traits(wcs):
    id_list_file = out_dir + prefix + f"downstream_filter_id_list_{wcs.downstream_method}_FDR_p_{wcs.downstream_p}.csv"
    ids = pd.read_csv(id_list_file)['id'].tolist()
    return expand(data_dir + "inst_{id}.RDS", id=ids)
    
rule unique_traits:
    input: id_list = out_dir + prefix + "downstream_filter_id_list_{downstream_method}_FDR_p_{downstream_p}.csv",
           trait_info = out_dir + prefix + "downstream_filter_trait_info_{downstream_method}_FDR_p_{downstream_p}.csv",
           pairwise_cor = out_dir + prefix + "pairwise_cor_{downstream_method}_FDR_p_{downstream_p}.RDS",
           df_bidirection = out_dir + prefix + "downstream_filter_df_bidirection_{downstream_method}_FDR_p_{downstream_p}.csv",
           inst_files = input_unique_traits
    params: R2_cutoff = config["analysis"]["unique_traits"]["R2_cutoff"],
            method = config["analysis"]["unique_traits"]["method"],
            extra_traits =  config["analysis"]["bidirection_mr"]["extra_trait"],
            cluster_selection_method = "{cluster_selection_meth}"
    output: out_id_list = out_dir + prefix + "unique_traits_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
            out_trait_info = out_dir + prefix + "unique_traits_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/4_unique_trait.R"

rule strength_filter:
    input: beta = expand(data_dir + prefix + "unique_traits_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
           R = out_dir + prefix + "unique_traits_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_R_" + MVMR_R_type + ".RDS",
           trait_info = out_dir + prefix + "unique_traits_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    params: pval_threshold = config["analysis"]["strength_filter"]["pval_threshold"],
            F_threshold = config["analysis"]["strength_filter"]["F_threshold"],
            R_type = MVMR_R_type,
            extra_traits =  config["analysis"]["strength_filter"]["extra_traits"],
            effect_size_cutoff = config["analysis"]["MVMR_analysis"]["effect_size_cutoff"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out_id_list = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
            out_trait_info = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv",
            out_df_strength = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_df_strength.csv"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/5_strength_filter.R"

rule classic_Lasso:
    input: beta = expand(data_dir + prefix + "unique_traits_filter_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
           trait_info = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    params: id_exposure = id_exposure,
            lambda_type = lambda wc: wc.get("lambda_type"),
            seed = config["analysis"]["confounder_selection"]["seed"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out_id_list = out_dir + prefix + "selection_classic_Lasso_{lambda_type}_seed{seed}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
            out_trait_info = out_dir + prefix + "selection_classic_Lasso_{lambda_type}_seed{seed}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    wildcard_constraints: seed = "\d+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/6_classic_Lasso.R"

rule corrected_Lasso:
    input:  beta = expand(data_dir + prefix + "unique_traits_filter_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
            trait_info = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    params: id_exposure = id_exposure,
            radius_type = lambda wc: wc.get("radius_type"),
            seed = config["analysis"]["confounder_selection"]["seed"],
            maxits = config["analysis"]["confounder_selection"]["maxits"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out_id_list = out_dir + prefix + "selection_corrected_Lasso_{radius_type}_seed{seed}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
            out_trait_info = out_dir + prefix + "selection_corrected_Lasso_{radius_type}_seed{seed}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    wildcard_constraints: seed = "\d+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/6_corrected_Lasso.R"

rule stepwise:
    input: beta = expand(data_dir + prefix + "unique_traits_filter_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
           trait_info = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    params: id_exposure = id_exposure,
            method = lambda wc: wc.get("stepwise_method"),
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    wildcard_constraints: stepwise_method = '[a-z]+',
                          cluster_selection_meth = "n_inst|pvalue"
    output: out_id_list = out_dir + prefix + "selection_stepwise_{stepwise_method}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
            out_trait_info = out_dir + prefix + "selection_stepwise_{stepwise_method}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    script: "R/6_stepwise.R"

rule marginal:
    input: id_list = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
           trait_info = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv",
           file_bidirection = out_dir + prefix + "downstream_filter_df_bidirection_{downstream_method}_FDR_p_{downstream_p}.csv"
    params: p_cutoff = lambda wc: wc.get("marginal_p"),
            extra_traits =  config["analysis"]["bidirection_mr"]["extra_trait"]
    output: out_id_list = out_dir + prefix + "selection_marginal_p_{marginal_p}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
            out_trait_info = out_dir + prefix + "selection_marginal_p_{marginal_p}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    wildcard_constraints: marginal_p = "\d+(\.\d+)?",
                          downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/6_marginal.R"

rule literature:
    input: id_list = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
           trait_info = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    params: literature_traits =  config["analysis"]["confounder_selection"]["literature_traits"]
    output: out_id_list = out_dir + prefix + "selection_literature_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv",
            out_trait_info = out_dir + prefix + "selection_literature_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/6_literature.R"

rule UVMR:
    output: temp(out_dir + prefix + 'UVMR.csv')
    shell: "touch {output}"
    
def input_MVMR_combine_gwas(wildcards):
    downstream_method = wildcards.downstream_method
    downstream_p = wildcards.downstream_p
    cluster_selection_meth = wildcards.cluster_selection_meth
    myfile = checkpoints.download_gwas.get(downstream_method=downstream_method,downstream_p=downstream_p).output[0]
    if wildcards.MVMR_id == 'selection_UVMR':
        return [out_dir + prefix + 'UVMR.csv']
    else:
        inputs = []
        id_list_file = out_dir + prefix + f"{wildcards.MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_id_list.csv"
        trait_info_file = out_dir + prefix + f"{wildcards.MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
        inputs.extend([id_list_file, trait_info_file])
        if wildcards.MVMR_id == 'selection_literature':
            literature_file = config["analysis"]["confounder_selection"]["df_literature"]
            inputs.append(literature_file)
    return inputs

rule info_exposure_outcome:
    params: id_exposure = id_exposure,
            id_outcome = id_outcome
    output: 
        out = df_info_exposure_outcome
    script: "R/generate_info.R"
    
rule MVMR_combine_gwas:
    input: file = input_MVMR_combine_gwas,
           file_info_exposure_outcome = df_info_exposure_outcome,
           download = data_dir + prefix + "download_{downstream_method}_FDR_p_{downstream_p}.sh"
    params: path = original_gwas_dir,
            id_exposure = id_exposure,
            id_outcome = id_outcome
    output: out = data_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_beta.{chrom}.RDS"
    wildcard_constraints: chrom = "\d+",
                          MVMR_id = "(?!.*all).*",
                          downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/7_MVMR_combine_gwas.R"

rule MVMR_LD_clumping:
    input: beta = data_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_beta.{chrom}.RDS"
    params: r2_thresh = config["analysis"]["ldprune"]["r2_thresh"],
            clump_kb = config["analysis"]["ldprune"]["clump_kb"],
            ref_path = config["analysis"]["ldprune"]["ref_path"],
            ld_prioritization = config["analysis"]["ldprune"]["ld_prioritization"],
            pthresh = config["analysis"]["ldprune"]["pthresh"]
    output: out = data_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_beta_ldpruned.{chrom}.RDS"
    wildcard_constraints: chrom = "\d+",
                          downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/7_ld_prune_plink.R"

rule MVMR_R_ldsc:
    input: beta = expand(data_dir + prefix + "{{MVMR_id}}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta.{chrom}.RDS", chrom = range(1, 23)),
           m = expand(l2_dir + "{chrom}.l2.M_5_50", chrom = range(1, 23)),
           l2 = expand(l2_dir + "{chrom}.l2.ldscore.gz", chrom = range(1, 23))
    output: out = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_R_ldsc.RDS"
    script: "R/4_ldsc_full.R"

rule MVMR_R_pval:
    input: beta = expand(data_dir + prefix + "{{MVMR_id}}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23))
    params: p_thresh = config["analysis"]["estimate_R"]["p_thresh"]
    output: out = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_R_pval.RDS"
    script: "R/7_estimate_R_pval.R"

rule MVMR_IVW:
    input: beta = expand(data_dir + prefix + "{{MVMR_id}}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23))
    params: pval_threshold = lambda wc: wc.get("IVW_pt"),
            effect_size_cutoff = config["analysis"]["MVMR_analysis"]["effect_size_cutoff"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_MVMR_IVW_{IVW_pt}.RDS"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/7_MVMR_IVW.R"

rule MVMR_GRAPPLE:
    input: beta = expand(data_dir + prefix + "{{MVMR_id}}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
           R = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_R_" + MVMR_R_type + ".RDS"
    params: pval_threshold = lambda wc: wc.get("GRAPPLE_pt"),
            R_type = MVMR_R_type,
            effect_size_cutoff = config["analysis"]["MVMR_analysis"]["effect_size_cutoff"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_MVMR_GRAPPLE_{GRAPPLE_pt}.RDS"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/7_MVMR_GRAPPLE.R"

rule MVMR_MRBEE:
    input: beta = expand(data_dir + prefix + "{{MVMR_id}}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
           R = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_R_" + MVMR_R_type + ".RDS"
    params: pval_threshold = lambda wc: wc.get("MRBEE_pt"),
            pleio_p_thresh = lambda wc: wc.get("pleio_pt"),
            R_type = MVMR_R_type,
            effect_size_cutoff = config["analysis"]["MVMR_analysis"]["effect_size_cutoff"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_MVMR_MRBEE_{MRBEE_pt}_pleio_{pleio_pt}.RDS"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/7_MVMR_MRBEE.R"

rule MVMR_ESMR:
    input: beta = expand(data_dir + prefix + "{{MVMR_id}}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
           R = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_R_" + MVMR_R_type + ".RDS"
    params: pval_threshold = lambda wc: wc.get("ESMR_pt"),
            R_type = MVMR_R_type,
            effect_size_cutoff = config["analysis"]["MVMR_analysis"]["effect_size_cutoff"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out = out_dir + prefix + "{MVMR_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_MVMR_ESMR_{ESMR_pt}.RDS"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/7_MVMR_ESMR.R"

rule MVMR_strength:
    input: beta = expand(data_dir + prefix + "{{MVMR_strength_id}}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_beta_ldpruned.{chrom}.RDS", chrom = range(1, 23)),
           R = out_dir + prefix + "{MVMR_strength_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_R_" + MVMR_R_type + ".RDS",
           trait_info = out_dir + prefix + "unique_traits_filter_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_trait_info.csv"
    params: pval_threshold = config["analysis"]["MVMR_analysis"]["p_thresh_strength"],
            R_type = MVMR_R_type,
            effect_size_cutoff = config["analysis"]["MVMR_analysis"]["effect_size_cutoff"],
            type_outcome = type_outcome,
            prevalence_outcome = prevalence_outcome
    output: out = out_dir + prefix + "{MVMR_strength_id}_{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_MVMR_strength.csv"
    wildcard_constraints: MVMR_id = "(?!.*all).*",
                          downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/8_MVMR_strength.R"
    
rule summary_result:
    input: mvmr_file = expand(out_dir + prefix + "{MVMR_id}_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_MVMR_{type}.RDS",MVMR_id = MVMR_list, type=MVMR_method),
           uvmr_file = expand(out_dir + prefix + "selection_UVMR_{{downstream_method}}_FDR_p_{{downstream_p}}_{{cluster_selection_meth}}_MVMR_{type}.RDS",type=MVMR_method)
    params: prefix = prefix,
            method = config["analysis"]["downstream_filter"]["method"],
            id_exposure = id_exposure,
            id_outcome = id_outcome
    output: out1 = out_dir + prefix + "{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_summary.csv",
            out2 = out_dir + prefix + "{downstream_method}_FDR_p_{downstream_p}_{cluster_selection_meth}_summary.pdf"
    wildcard_constraints: downstream_method = "(MR_.*|MVMR_.*)",
                          downstream_p = "[\d.]+",
                          cluster_selection_meth = "n_inst|pvalue"
    script: "R/8_summary_result.R"



